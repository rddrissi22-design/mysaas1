// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // App specific fields
  marketingOptIn Boolean @default(false)
  theme         String  @default("system")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  memberships   Membership[]
  createdOrgs   Organization[] @relation("CreatedBy")
  
  // Vibe app data
  vibePrompts   VibePrompt[]
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  createdById String
  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])
  
  memberships   Membership[]
  subscription  Subscription?
  invoices      Invoice[]
  transactions  Transaction[]
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Membership {
  id     String         @id @default(cuid())
  role   MembershipRole
  userId String
  orgId  String
  
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, orgId])
}

enum SubscriptionStatus {
  TRIALING
  PENDING
  ACTIVE
  PAST_DUE
  EXPIRED
  CANCELLED
}

model Subscription {
  id                String             @id @default(cuid())
  orgId             String             @unique
  org               Organization       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  status            SubscriptionStatus @default(TRIALING)
  planName          String             @default("Pro Plan")
  amount            Int                // in cents
  currency          String             @default("USD")
  billingInterval   String             @default("monthly") // monthly, yearly
  
  trialEndsAt       DateTime?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  graceEndsAt       DateTime?
  
  autoRenewal       Boolean            @default(true)
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  invoices          Invoice[]
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model Invoice {
  id             String        @id @default(cuid())
  number         String        @unique
  orgId          String
  subscriptionId String
  
  org            Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  status         InvoiceStatus @default(PENDING)
  amount         Int           // in cents
  currency       String        @default("USD")
  description    String
  
  dueDate        DateTime
  paidAt         DateTime?
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  transactions   Transaction[]
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Transaction {
  id            String            @id @default(cuid())
  invoiceId     String
  orgId         String
  
  invoice       Invoice           @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  org           Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  status        TransactionStatus @default(PENDING)
  amount        Int               // in cents
  currency      String            @default("USD")
  bankReference String?
  notes         String?
  approvedBy    String?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}

model EmailLog {
  id        String      @id @default(cuid())
  to        String
  subject   String
  template  String
  status    EmailStatus @default(PENDING)
  error     String?
  metadata  Json?
  
  createdAt DateTime    @default(now())
}

// Vibe App Models
model VibePrompt {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title     String
  content   String   @db.Text
  response  String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}